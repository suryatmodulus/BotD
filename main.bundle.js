(()=>{"use strict";var n={800:(n,e,t)=>{t.d(e,{Z:()=>u});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,"body {\n  width: 100%;\n  min-height: 100vh;\n  padding: 0;\n  margin: 0;\n  font-family: sans-serif;\n}\n\n.logo_ref {\n  margin-top: 20px;\n  width: max-content;\n}\n\n.logo {\n  width: 300px;\n  height: auto;\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.buttons-container {\n  display: flex;\n  gap: 1.2em;\n  padding: 16px 0px;\n}\n\n.button {\n  width: fit-content;\n  border: none;\n  background: #f04405;\n  color: #fff;\n  font: inherit;\n  font-size: 88%;\n  font-weight: 600;\n  line-height: 1.2;\n  border-radius: 10px;\n  cursor: pointer;\n  margin: 0;\n  padding: 0.85em 1.7em;\n  text-align: center;\n  outline: none;\n  max-width: 130px;\n}\n\n#copy-logs-button {\n  border: 1px solid #f04405;\n  background: transparent;\n  color: #f04405;\n}\n\n.output_holder {\n  flex: 1;\n  min-height: 4em;\n  height: 100vh;\n  position: relative;\n  margin: 20px 0px;\n}\n\n.output {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  background: #282c34;\n  box-shadow: 0 0 1.25em rgba(0, 0, 0, 0.2);\n  border-radius: 0.7em;\n  padding: 1em 1.25em;\n  overflow: auto;\n}\n\n.output_div {\n  color: white;\n  margin: 10px;\n  white-space: pre-wrap;\n}\n\nh5 {\n  margin: 10px;\n  color: #f0470a;\n}\n\n#results-list {\n  display: flex;\n  flex-wrap: wrap;\n  row-gap: 24px;\n  margin-bottom: 16px;\n}\n\n.green {\n  color: green;\n}\n\n.red {\n  color: orangered;\n}\n\n@media (max-width: 1024px) {\n  body {\n    font-size: small;\n  }\n\n  h1,\n  h2 {\n    margin: 10px 0 10px 0;\n  }\n}\n","",{version:3,sources:["webpack://./playground/style.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,iBAAiB;EACjB,UAAU;EACV,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;;EAEE,gBAAgB;EAChB,cAAc;AAChB;AACA;EACE,eAAe;AACjB;AACA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,wBAAwB;EACxB,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,mBAAmB;EACnB,WAAW;EACX,aAAa;EACb,cAAc;EACd,gBAAgB;EAChB,gBAAgB;EAChB,mBAAmB;EACnB,eAAe;EACf,SAAS;EACT,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,cAAc;AAChB;;AAEA;EACE,OAAO;EACP,eAAe;EACf,aAAa;EACb,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,mBAAmB;EACnB,yCAAyC;EACzC,oBAAoB;EACpB,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE;IACE,gBAAgB;EAClB;;EAEA;;IAEE,qBAAqB;EACvB;AACF",sourcesContent:["body {\n  width: 100%;\n  min-height: 100vh;\n  padding: 0;\n  margin: 0;\n  font-family: sans-serif;\n}\n\n.logo_ref {\n  margin-top: 20px;\n  width: max-content;\n}\n\n.logo {\n  width: 300px;\n  height: auto;\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.buttons-container {\n  display: flex;\n  gap: 1.2em;\n  padding: 16px 0px;\n}\n\n.button {\n  width: fit-content;\n  border: none;\n  background: #f04405;\n  color: #fff;\n  font: inherit;\n  font-size: 88%;\n  font-weight: 600;\n  line-height: 1.2;\n  border-radius: 10px;\n  cursor: pointer;\n  margin: 0;\n  padding: 0.85em 1.7em;\n  text-align: center;\n  outline: none;\n  max-width: 130px;\n}\n\n#copy-logs-button {\n  border: 1px solid #f04405;\n  background: transparent;\n  color: #f04405;\n}\n\n.output_holder {\n  flex: 1;\n  min-height: 4em;\n  height: 100vh;\n  position: relative;\n  margin: 20px 0px;\n}\n\n.output {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  background: #282c34;\n  box-shadow: 0 0 1.25em rgba(0, 0, 0, 0.2);\n  border-radius: 0.7em;\n  padding: 1em 1.25em;\n  overflow: auto;\n}\n\n.output_div {\n  color: white;\n  margin: 10px;\n  white-space: pre-wrap;\n}\n\nh5 {\n  margin: 10px;\n  color: #f0470a;\n}\n\n#results-list {\n  display: flex;\n  flex-wrap: wrap;\n  row-gap: 24px;\n  margin-bottom: 16px;\n}\n\n.green {\n  color: green;\n}\n\n.red {\n  color: orangered;\n}\n\n@media (max-width: 1024px) {\n  body {\n    font-size: small;\n  }\n\n  h1,\n  h2 {\n    margin: 10px 0 10px 0;\n  }\n}\n"],sourceRoot:""}]);const u=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var u=0;u<this.length;u++){var s=this[u][0];null!=s&&(a[s]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],u=0;u<n.length;u++){var s=n[u],c=r.base?s[0]+r.base:s[0],d=i[c]||0,l="".concat(c," ").concat(d);i[c]=d+1;var f=t(l),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)e[f].references++,e[f].updater(p);else{var A=o(p,r);r.byIndex=u,e.splice(u,0,{identifier:l,updater:A,references:1})}a.push(l)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var u=t(i[a]);e[u].references--}for(var s=r(n,o),c=0;c<i.length;c++){var d=t(i[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])},n(e,t)};function e(n,e,t,r){return new(t||(t=Promise))((function(o,i){function a(n){try{s(r.next(n))}catch(n){i(n)}}function u(n){try{s(r.throw(n))}catch(n){i(n)}}function s(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(a,u)}s((r=r.apply(n,e||[])).next())}))}function r(n,e){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(n,a)}catch(n){i=[6,n],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}Object.create,Object.create;function o(n,e){return-1!==n.indexOf(e)}function i(n,e){return-1!==n.indexOf(e)}function a(n,e){if("find"in n)return n.find(e);for(var t=0;t<n.length;t++)if(e(n[t],t,n))return n[t]}function u(n){return Object.getOwnPropertyNames(n)}function s(n){for(var e=[],t=1;t<arguments.length;t++)e[t-1]=arguments[t];for(var r=function(e){if("string"==typeof e){if(o(n,e))return{value:!0}}else if(null!=a(n,(function(n){return e.test(n)})))return{value:!0}},i=0,u=e;i<u.length;i++){var s=u[i],c=r(s);if("object"==typeof c)return c.value}return!1}function c(n){return n.reduce((function(n,e){return n+(e?1:0)}),0)}var d=function(e){function t(n,r){var o=e.call(this,r)||this;return o.state=n,o.name="BotdError",Object.setPrototypeOf(o,t.prototype),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}(t,e),t}(Error);function l(){var n,e,t=window,r=navigator;return c(["webkitPersistentStorage"in r,"webkitTemporaryStorage"in r,0===r.vendor.indexOf("Google"),"webkitResolveLocalFileSystemURL"in t,"BatteryManager"in t,"webkitMediaStream"in t,"webkitSpeechGrammar"in t])>=5?"chromium":c(["ApplePayError"in t,"CSSPrimitiveValue"in t,"Counter"in t,0===r.vendor.indexOf("Apple"),"getStorageUpdates"in r,"WebKitMediaKeys"in t])>=4?"webkit":c(["buildID"in navigator,"MozAppearance"in(null!==(e=null===(n=document.documentElement)||void 0===n?void 0:n.style)&&void 0!==e?e:{}),"onmozfullscreenchange"in t,"mozInnerScreenX"in t,"CSSMozDocumentRule"in t,"CanvasCaptureMediaStream"in t])>=4?"gecko":"unknown"}function f(){var n,e=null===(n=navigator.userAgent)||void 0===n?void 0:n.toLowerCase();return i(e,"wechat")?"wechat":i(e,"firefox")?"firefox":i(e,"opera")||i(e,"opr")?"opera":i(e,"chrome")?"chrome":i(e,"safari")?"safari":i(e,"trident")||i(e,"msie")?"internet_explorer":"unknown"}function p(){var n=l(),e="chromium"===n,t="gecko"===n;if(!e&&!t)return!1;var r=window;return c(["onorientationchange"in r,"orientation"in r,e&&!("SharedWorker"in r),t&&/android/i.test(navigator.appVersion)])>=2}function A(){if("webkit"!==l())return!1;var n=window;return c(["safari"in n,!("DeviceMotionEvent"in n),!("ongestureend"in n),!("standalone"in navigator)])>=3}function v(){if(void 0===window.CSS)throw new d(-1,"window.CSS is undefined");return CSS.supports("-moz-appearance","auto")}function m(){return void 0!==document.hasFocus&&document.hasFocus()}var h={detectAppVersion:function(n){var e=n.appVersion;return 0===e.state&&(/headless/i.test(e.value)?"headless_chrome":/electron/i.test(e.value)?"electron":/slimerjs/i.test(e.value)?"slimerjs":void 0)},detectDocumentAttributes:function(n){var e=n.documentAttributes;return 0===e.state&&(s(e.value,"selenium","webdriver","driver")?"selenium":void 0)},detectDocumentProperties:function(n){var e=n.documentProps;return 0===e.state&&(s(e.value,"selenium","__fxdriver_unwrapped","__selenium_unwrapped","__webdriver_evaluate","__driver_evaluate","__webdriver_unwrapped","__driver_unwrapped","__selenium_evaluate","__webdriver_script_function","__webdriver_script_func","__webdriver_script_fn","__fxdriver_evaluate","__webdriverFunc","$chrome_asyncScriptInfo","__$webdriverAsyncExecutor","__lastWatirAlert","__lastWatirConfirm","__lastWatirPrompt","_WEBDRIVER_ELEM_CACHE","ChromeDriverw","selenium-evaluate","_Selenium_IDE_Recorder",/^([a-z]){3}_.*_(Array|Promise|Symbol)$/)?"selenium":void 0)},detectErrorTrace:function(n){var e=n.errorTrace;return 0===e.state&&(/PhantomJS/i.test(e.value)?"phantomjs":void 0)},detectEvalLengthInconsistency:function(n){var e=n.evalLength;if(0===e.state){var t=e.value,r=f();return 37===t&&!o(["firefox","safari"],r)||39===t&&!o(["internet_explorer"],r)||33===t&&!o(["chrome","opera","wechat"],r)}},detectFunctionBind:function(n){if(-2===n.functionBind.state)return"phantomjs"},detectLanguagesLengthInconsistency:function(n){var e=n.languages;if(0===e.state&&0===e.value.length)return"headless_chrome"},detectNotificationPermissions:function(n){var e=n.notificationPermissions;return"chrome"===f()&&(0===e.state&&e.value?"headless_chrome":void 0)},detectPluginsArray:function(n){var e=n.pluginsArray;if(0===e.state&&!e.value)return"headless_chrome"},detectPluginsLengthInconsistency:function(n){var e=n.pluginsLength;if(0===e.state){var t=f();if(!("chromium"===l()&&p()||"safari"===t&&!A()))return 0===e.value?"headless_chrome":void 0}},detectProcess:function(n){var e,t=n.process;return 0===t.state&&("renderer"===t.value.type||null!=(null===(e=t.value.versions)||void 0===e?void 0:e.electron)?"electron":void 0)},detectRTT:function(n){var e=n.rtt;if(0===e.state&&!p())return 0===e.value?"headless_chrome":void 0},detectUserAgent:function(n){var e=n.userAgent;return 0===e.state&&(/PhantomJS/i.test(e.value)?"phantomjs":/Headless/i.test(e.value)?"headless_chrome":/Electron/i.test(e.value)?"electron":/slimerjs/i.test(e.value)?"slimerjs":void 0)},detectWebDriver:function(n){var e=n.webDriver;if(0===e.state&&e.value)return"headless_chrome"},detectWebGL:function(n){var e=n.webGL;if(0===e.state){var t=e.value,r=t.vendor,o=t.renderer;if("Brian Paul"==r&&"Mesa OffScreen"==o)return"headless_chrome"}},detectWindowExternal:function(n){var e=n.windowExternal;return 0===e.state&&(/Sequentum/i.test(e.value)?"sequentum":void 0)},detectWindowProperties:function(n){var e=n.windowProps;return 0===e.state&&(s(e.value,"webdriver","domAutomation","domAutomationController")?"headless_chrome":s(e.value,"_selenium","_Selenium_IDE_Recorder","callSelenium")?"selenium":s(e.value,"callPhantom","_phantom")?"phantomjs":s(e.value,"__nightmare")?"nightmare":s(e.value,"emit")?"couchjs":s(e.value,"spawn")?"rhino":s(e.value,"CefSharp")?"cefsharp":void 0)},detectWindowSize:function(n){var e=n.windowSize;if(0!==e.state)return!1;var t=e.value,r=t.outerWidth,o=t.outerHeight;return m()&&0===r&&0===o?"headless_chrome":void 0},detectMimeTypesConsistent:function(n){var e=n.mimeTypesConsistent;if(0===e.state&&!e.value)return"unknown"},detectProductSub:function(n){var e=n.productSub;if(0!==e.state)return!1;var t=f();return"chrome"!==t&&"safari"!==t&&"opera"!==t&&"wechat"!==t||"20030107"===e.value?void 0:"unknown"}},g={userAgent:function(){return navigator.userAgent},appVersion:function(){var n=navigator.appVersion;if(null==n)throw new d(-1,"navigator.appVersion is undefined");return n},rtt:function(){if(void 0===navigator.connection)throw new d(-1,"navigator.connection is undefined");if(void 0===navigator.connection.rtt)throw new d(-1,"navigator.connection.rtt is undefined");return navigator.connection.rtt},windowSize:function(){return{outerWidth:window.outerWidth,outerHeight:window.outerHeight,innerWidth:window.innerWidth,innerHeight:window.innerHeight}},pluginsLength:function(){if(void 0===navigator.plugins)throw new d(-1,"navigator.plugins is undefined");return navigator.plugins.length},pluginsArray:function(){if(void 0===navigator.plugins)throw new d(-1,"navigator.plugins is undefined");if(void 0===window.PluginArray)throw new d(-1,"window.PluginArray is undefined");return navigator.plugins instanceof PluginArray},errorTrace:function(){try{null[0]()}catch(n){if(n instanceof Error&&null!=n.stack)return n.stack.toString()}throw new d(-3,"errorTrace signal unexpected behaviour")},productSub:function(){var n=navigator.productSub;if(void 0===n)throw new d(-1,"navigator.productSub is undefined");return n},windowExternal:function(){if(void 0===window.external)throw new d(-1,"window.external is undefined");var n=window.external;if("function"!=typeof n.toString)throw new d(-2,"window.external.toString is not a function");return n.toString()},mimeTypesConsistent:function(){if(void 0===navigator.mimeTypes)throw new d(-1,"navigator.mimeTypes is undefined");for(var n=navigator.mimeTypes,e=Object.getPrototypeOf(n)===MimeTypeArray.prototype,t=0;t<n.length;t++)e&&(e=Object.getPrototypeOf(n[t])===MimeType.prototype);return e},evalLength:function(){return eval.toString().length},webGL:function(){var n=document.createElement("canvas");if("function"!=typeof n.getContext)throw new d(-2,"HTMLCanvasElement.getContext is not a function");var e=n.getContext("webgl");if(null===e)throw new d(-4,"WebGLRenderingContext is null");if("function"!=typeof e.getParameter)throw new d(-2,"WebGLRenderingContext.getParameter is not a function");return{vendor:e.getParameter(e.VENDOR),renderer:e.getParameter(e.RENDERER)}},webDriver:function(){if(null==navigator.webdriver)throw new d(-1,"navigator.webdriver is undefined");return navigator.webdriver},languages:function(){return Object.assign([],navigator.languages)},notificationPermissions:function(){return e(this,void 0,void 0,(function(){var n,e;return r(this,(function(t){switch(t.label){case 0:if(void 0===window.Notification)throw new d(-1,"window.Notification is undefined");if(void 0===navigator.permissions)throw new d(-1,"navigator.permissions is undefined");if("function"!=typeof(n=navigator.permissions).query)throw new d(-2,"navigator.permissions.query is not a function");t.label=1;case 1:return t.trys.push([1,3,,4]),[4,n.query({name:"notifications"})];case 2:return e=t.sent(),[2,"denied"===window.Notification.permission&&"prompt"===e.state];case 3:throw t.sent(),new d(-3,"notificationPermissions signal unexpected behaviour");case 4:return[2]}}))}))},documentAttributes:function(){if(void 0===document.documentElement)throw new d(-1,"document.documentElement is undefined");return Array.from(document.documentElement.attributes).map((function(n){return n.name}))},functionBind:function(){if(void 0===Function.prototype.bind)throw new d(-2,"Function.prototype.bind is undefined");return Function.prototype.bind.toString()},process:function(){if(void 0===window.process)throw new d(-1,"window.process is undefined");return window.process},documentProps:function(){if(void 0===window.document)throw new d(-1,"window.document is undefined");return u(window.document)},windowProps:function(){return u(window)}},w=function(){function n(){this.components=void 0,this.detections=void 0}return n.prototype.getComponents=function(){return this.components},n.prototype.getDetections=function(){return this.detections},n.prototype.getSources=function(){return g},n.prototype.getDetectors=function(){return h},n.prototype.detect=function(){if(void 0===this.components)throw new Error("BotDetector.detect can't be called before BotDetector.collect");var n=this.components,e=this.getDetectors(),t={},r={bot:!1};for(var o in e){var i=(0,e[o])(n),a={bot:!1};"string"==typeof i?a={bot:!0,botKind:i}:i&&(a={bot:!0,botKind:"unknown"}),t[o]=a,a.bot&&(r=a)}return this.detections=t,r},n.prototype.collect=function(){return e(this,void 0,void 0,(function(){var n,t,o,i=this;return r(this,(function(a){switch(a.label){case 0:return n=this.getSources(),t={},o=Object.keys(n),[4,Promise.all(o.map((function(o){return e(i,void 0,void 0,(function(){var e,i,a,u,s;return r(this,(function(r){switch(r.label){case 0:e=n[o],r.label=1;case 1:return r.trys.push([1,3,,4]),i=t,a=o,s={},[4,e()];case 2:return i[a]=(s.value=r.sent(),s.state=0,s),[3,4];case 3:return u=r.sent(),t[o]=u instanceof d?{state:u.state,error:"".concat(u.name,": ").concat(u.message)}:{state:-3,error:u instanceof Error?"".concat(u.name,": ").concat(u.message):String(u)},[3,4];case 4:return[2]}}))}))})))];case 1:return a.sent(),this.components=t,[2,this.components]}}))}))},n}();const b=w;function y(n){var t=(void 0===n?{}:n).monitoring,o=void 0===t||t;return e(this,void 0,void 0,(function(){var n;return r(this,(function(e){switch(e.label){case 0:return o&&function(){if(!(window.__fpjs_d_m||Math.random()>=.001))try{var n=new XMLHttpRequest;n.open("get","https://m1.openfpcdn.io/botd/v".concat("1.0.0","/npm-monitoring"),!0),n.send()}catch(n){console.error(n)}}(),[4,(n=new b).collect()];case 1:return e.sent(),[2,n]}}))}))}var E=t(379),C=t.n(E),x=t(795),B=t.n(x),_=t(569),S=t.n(_),k=t(565),P=t.n(k),O=t(216),T=t.n(O),j=t(589),I=t.n(j),L=t(800),R={};R.styleTagTransform=I(),R.setAttributes=P(),R.insert=S().bind(null,"head"),R.domAPI=B(),R.insertStyleElement=T(),C()(L.Z,R),L.Z&&L.Z.locals&&L.Z.locals;var M=void 0,D=function(){return e(void 0,void 0,void 0,(function(){var n,e,t,o,i,a,u,s,c,d,h,g,w,b,E,C,x,B,_,S,k,P;return r(this,(function(r){switch(r.label){case 0:n=document.getElementById("status"),e=document.getElementById("results-list"),t=document.getElementById("error_section"),o=document.getElementById("result_section"),i=document.getElementById("error"),a=document.getElementById("perf"),u=document.getElementById("time"),s=document.getElementById("sources"),c=document.getElementById("result"),d=document.getElementById("detailed-results"),h=document.getElementById("debug-data"),n.textContent="Loading...",e.innerHTML="",t.style.display="none",o.style.display="none",r.label=1;case 1:return r.trys.push([1,3,,4]),g=performance.now(),[4,y()];case 2:return w=r.sent(),b=performance.now()-g,E=w.detect(),C=performance.now()-g,x=null!==(k=w.getComponents())&&void 0!==k?k:{},B=null!==(P=w.getDetections())&&void 0!==P?P:{},M={timeToGetResults:b.toFixed(0)+" ms",timeToCollectSignals:C.toFixed(0)+" ms",detectionResult:E,collectedData:x,detailedResults:B},s.textContent=JSON.stringify(M.collectedData,null,4),t.style.display="none",o.style.display="block",a.textContent=M.timeToGetResults,u.textContent=M.timeToCollectSignals,n.textContent="Result:",c.textContent=JSON.stringify(M.detectionResult,null,4),d.textContent="Detailed results:",d.textContent=JSON.stringify(M.detailedResults,null,4),_={browserEngineKind:l(),browserKind:f(),documentFocus:m(),mozAppearanceSupport:v(),isAndroid:p(),isDesktopSafari:A()},h.textContent="Debug data:",h.textContent=JSON.stringify(_,null,4),e.innerHTML="<span>Automation tool: ".concat(E.bot?'<span class="green"><b>Detected ('.concat(E.botKind,")</b></span>"):"<span><b>Not detected</b></span>","</span>"),[3,4];case 3:return S=r.sent(),o.style.display="none",t.style.display="block",n.textContent="Error!",i.textContent=JSON.stringify(S,null,4),[3,4];case 4:return[2]}}))}))};window.onload=function(){return e(void 0,void 0,void 0,(function(){return r(this,(function(n){return document.getElementById("detect-button").addEventListener("click",(function(){return D()})),document.getElementById("copy-logs-button").addEventListener("click",(function(){navigator.clipboard.writeText(JSON.stringify(M)).then((function(){alert("Copied to clipboard")}))})),D(),[2]}))}))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,